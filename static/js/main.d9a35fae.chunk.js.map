{"version":3,"sources":["images/synchronicity_logo_white.png","api/spreadsheet.js","components/CTA/CTA.jsx","components/Navbar/Navbar.jsx","pages/Topics/Topics.jsx","components/Folder/Folder.jsx","functions/generateContent.jsx","App.js","serviceWorker.js","index.js","images/folder_red.png"],"names":["module","exports","rows","tag0Unique","CTA","id","Navbar","className","src","require","alt","Topics","Folder","filteredStandards","getTag0","Promise","resolve","reject","Tabletop","init","key","callback","googleData","data","tag0Array","step","Object","keys","length","tag0","push","Array","from","Set","getTags","tag0Select","tagAll","filter","el","console","log","generateContent","imgPath","i","document","getElementById","innerHTML","App","useEffect","then","querySelector","test","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9a35fae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/synchronicity_logo_white.41c52f23.png\";","import Tabletop from 'tabletop';\n\nexport let rows;\nexport let tag0Unique;\nexport let tagAllUnique;\nexport let filteredStandards=[];\nexport let filteredSubStandards=[];\n\nexport const getTag0 = () => {\n\n    return new Promise((resolve, reject) => {\n        Tabletop.init({\n            key: '1nogRbK3sIbF0T2bUPar9YLqvKPUWwFaSk5jk_hGBq-g',\n            callback: googleData => {\n                // all data stored in data\n                var data = googleData['standards-datastore'];\n                // console.log('data --->', data);\n\n                // rows stored in rows\n                rows = data['elements'];\n                var tag0Array = []\n                for (let step = 0; step < Object.keys(rows).length; step++) {\n                    var tag0 = rows[step]['tag0'];\n                    tag0Array.push(tag0)\n                    }\n                resolve(tag0Unique = Array.from(new Set(tag0Array)));\n            },\n        });\n    });\n    \n}\n\n\nexport const getTags = (rows, tag0Select) => {\n    return new Promise((resolve, reject) => {\n        var tagAll = []\n        for (let step = 0; step < Object.keys(rows).length; step++) {\n            if (rows[step]['tag0'] === tag0Select) {\n                tagAll.push(rows[step]['tag1']);\n                tagAll.push(rows[step]['tag2']);\n                tagAll.push(rows[step]['tag3']);\n                tagAll.push(rows[step]['tag4']);\n                tagAll.push(rows[step]['tag5']);\n                tagAll.push(rows[step]['tag6']);\n                tagAll.push(rows[step]['tag7']);\n                filteredStandards.push(rows[step]);\n                }\n            }\n        resolve(tagAllUnique = Array.from(new Set(tagAll.filter(function (el) {\n            return el !== \"\";\n            }))));\n            console.log(filteredStandards); \n    });\n}\n\n\nexport const getFilteredSubStandards = (filteredStandards, subTagSelect) => {\n    return new Promise((resolve, reject) => {\n    for (let i = 0; i < Object.keys(filteredStandards).length; i++) {\n        for (let j = 1; j < 8; j++) {\n            var tagStr = 'tag'\n            var tagName = ''\n            tagName = tagStr.concat(j)\n        if (filteredStandards[i][tagName] === subTagSelect) {\n            filteredSubStandards.push(filteredStandards[i]);\n            }\n        }\n    }\n    resolve(filteredSubStandards)\n    });\n}","import React from 'react';\nimport './CTA.css';\n\nconst CTA = () => {\n    return(\n        <div id=\"CTA\">\n            <p>CTA</p>\n        </div>\n    )\n}\n\nexport default CTA;","import React from 'react';\nimport SynchronicityLogo from '../Synchronicity/SynchronicityLogo';\nimport CTA from '../CTA/CTA';\nimport './Navbar.css';\n\nconst Navbar = () => {\n    return(\n        <div id=\"navbar\" className=\"navbar\">\n            <img className=\"navbarLogo\" src={require(\"../../images/synchronicity_logo_white.png\")} alt=\"Synchronicity Logo\" />\n            <CTA />\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport './Topics.css';\n\nconst Topics = () => {\n    return (\n        <section id=\"section2\">\n            <div className=\"row\">\n                <div className=\"col-lg-3 col-md-4 col-sm-10 offset-lg-1 offset-md-1 offset-sm-1\">\n                        <h2 id=\"topicsHeader\" className=\"header\">Select topic</h2>\n                        <p id=\"topicsText\">All standards are categorised into these topics BLAHHHHH!!!. Please select one to continue</p>\n                </div>\n\n                {/* This is where all top level topics will be rendered */}\n                <div id=\"tag0Container\" className=\"tag0Container col-lg-7 col-md-6 col-sm-10\">\n                </div>\n            </div>\n\n        </section>\n    )\n}\n\nexport default Topics;","import React from 'react';\nimport './Folder.css';\nconst Asset = require('../../images/folder_red.png');\n\nconst Folder = () => (\n        <div id=\"folderContainer\">\n            <img src='./static/media/folder_red.90acdd63.png' alt=\"icon\" />\n        </div>\n    )\n\nexport default Folder;","import React from 'react';\nimport { tag0Unique } from '../api/spreadsheet';\nimport Folder from '../components/Folder/Folder';\n\n\nconst generateContent = {\n    tag0: (imgPath) => {\n        return new Promise((resolve, reject) => {\n            for (let i = 0; i < tag0Unique.length; i++) {\n                document.getElementById('tag0Container').innerHTML = document.getElementById('tag0Container').innerHTML + '<div class=\"topicDiv\"><img className=\"folder\" src=\"./src/images/folder_red.png\" alt=\"Topic Icon\"/><p class=\"topic\">' + tag0Unique[i] + '<p></div>'\n            }\n        }) \n    }\n}\n\nexport default generateContent;","import React, { useState, useEffect } from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport Landing from './pages/Landing/Landing';\nimport Topics from './pages/Topics/Topics';\nimport Folder from './components/Folder/Folder';\nimport SynchronicityLogo from './components/Synchronicity/SynchronicityLogo';\n// import { importSheet, getTag0, getTags, rows, tag0Unique, tagAllUnique, filteredStandards, filteredSubStandards, getFilteredSubStandards } from './api/spreadsheet';\nimport {\n  getTag0,\n  getTags,\n  rows,\n  tag0Unique,\n  tagAllUnique\n} from './api/spreadsheet';\nimport generateContent from './functions/generateContent.jsx';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nconst folderRed = require('./images/folder_red.png')\n\nfunction App() {\n  useEffect(() => {\n    // tag0 = click button\n    var tag0 = 'MIMs';\n    getTag0().then(() => { getTags(rows, tag0) })\n      .then(() => { generateContent.tag0(); })\n      .then(() => {\n        for (let i = 1; i <= tag0Unique.length; i++) {\n          document.querySelector('.topicDiv:nth-child(' + i + ')').innerHTML = <Folder /> + document.querySelector('.topicDiv:nth-child(' + i + ')').innerHTML\n          let test = document.querySelector('.topicDiv:nth-child(12)');\n          console.log(test)\n        }\n      });\n\n    console.log(rows);\n\n  }); \n\n\n      // // tag0 = click button topic\n    // var tag0 = 'MIMs'\n    // // subtag = click button subtopic\n    // var subtag = 'API'\n    // getTag0().then(() => {getTags(rows, tag0)}).then(() => {getFilteredSubStandards(filteredStandards, subtag)}).then(() => console.log(filteredSubStandards));\n    // // tag0Unique stores all topics\n    // // tagAllUnique stores all subtopics based on a topic\n    // // filteredStandards stores all standards based on a topic\n    // // filteredSubStandard stores all standards based on a subtopic and topic\n\n    \n  return (\n    <div className=\"App\">\n      <Navbar />\n      {/* <Landing /> */}\n      <Topics />\n      <Folder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/folder_red.90acdd63.png\";"],"sourceRoot":""}